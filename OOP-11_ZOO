   class Program
   {
      static void Main(string[] args)
      {
         List<Animal> animals = new List<Animal>()
         {
            new Tiger(Gender.Male),
            new Monkey(Gender.Male),
            new Tiger(Gender.Female),
            new Giraffe(Gender.Female),
            new Giraffe(Gender.Female),
            new Tiger(Gender.Female),
            new Giraffe(Gender.Male),
            new Giraffe(Gender.Male),
            new Monkey(Gender.Male),
            new Monkey(Gender.Female),
            new Monkey(Gender.Female),
            new Bear(Gender.Male),
            new Monkey(Gender.Female),
            new Monkey(Gender.Male),
            new Monkey(Gender.Female),
            new Monkey(Gender.Male),
            new Bear(Gender.Female)
         };

         bool isWork = true;

         Zoo zoo = new Zoo(animals);

         zoo.DistributeAnimals();

         while (isWork)
         {
            zoo.ShowCages();

            var input = ReadInteger("\nВыберите номер вольерa: ");

            if (input == "exit")
            {
               isWork = false;
            }
            else if (int.TryParse(input, out int number))
            {
               zoo.SelectCage(number);
               Console.ReadKey();
            }
            else
            {
               Console.WriteLine("Вы ввели не номер!!!\nНажмите любую клавишу, чтобы продолжить");
               Console.ReadKey();
            }

            Console.Clear();
         }

         string ReadInteger(string message)
         {
            Console.Write(message);
            return Console.ReadLine();
         }
      }
   }

   class Zoo
   {
      private List<Cage> _cages = new List<Cage>();
      private List<Animal> _animals = new List<Animal>();

      public Zoo(List<Animal> animals)
      {
         _animals = animals;
      }

      public void DistributeAnimals()
      {
         for (int i = 0; i < _animals.Count; i++)
         {
            var cage = _cages.Find(animal => animal.Name.Contains(_animals[i].Name));

            if (cage != null)
            {
               cage.AddAnimal(_animals[i]);
               _animals.RemoveAt(i);
               i--;
            }
            else
            {
               _cages.Add(new Cage(_animals[i].Name));
               i--;
            }
         }
      }

      public void ShowCages()
      {
         int count = 0;
         foreach (var cage in _cages)
         {
            Console.WriteLine("Вольер № " + (++count) + " " + cage.Name);
         }
      }

      public void SelectCage(int index)
      {
         if (index > 0 && index <= _cages.Count)
         {
            Console.WriteLine($"Вольер номер {index}");
            _cages[--index].ShowAnimals();
         }
         else
         {
            Console.WriteLine("Ошибка! Нет вольера с таким номером\nНажмите любую клавишу, чтобы продолжить");
         }
      }
   }

   class Cage
   {
      private List<Animal> _animals;

      public string Name { get; private set; }

      public Cage(string name)
      {
         Name = name;
         _animals = new List<Animal>();
      }

      public void AddAnimal(Animal animal)
      {
         _animals.Add(animal);
      }

      public void ShowAnimals()
      {
         _animals.ForEach(Console.WriteLine);
      }
   }

   abstract class Animal
   {
      protected string _sound;
      private Gender _gender;

      public string Name { get; protected set; }

      public Animal(Gender gender)
      {
         _gender = gender;
      }

      public override string ToString()
      {
         return $"{Name}, пол: {(_gender == Gender.Male ? "м" : "ж")}, звук: {_sound}";
      }
   }

   class Tiger : Animal
   {
      public Tiger(Gender gender) : base(gender)
      {
         Name = "Тигр";
         _sound = "Ррррр";
      }
   }

   class Giraffe : Animal
   {
      public Giraffe(Gender gender) : base(gender)
      {
         Name = "Жираф";
         _sound = "ууу";
      }
   }

   class Monkey : Animal
   {
      public Monkey(Gender gender) : base(gender)
      {
         Name = "Обезъяна";
         _sound = "Уаау";
      }
   }

   class Bear : Animal
   {
      public Bear(Gender gender) : base(gender)
      {
         Name = "Медведь";
         _sound = "рык";
      }
   }

   enum Gender
   {
      Male,
      Female
   }
}

class Program
   {
      static void Main(string[] args)
      {
         int moneyService = 120000;

         AutoService autoService = new AutoService(moneyService);

         autoService.Work();
      }
   }

public class AutoService
   {
      private int _penalty = 1500;
      private List<Shelf> _storage;
      private Dictionary<string, int> _jobPrice;
      private Queue<Unit> _clients;

      public int Money { get; private set; }

      public AutoService(int money)
      {
         Money = money;

         _storage = new List<Shelf>
         {
            new Shelf(new Part("коробка передач", 10000, false), 3),
            new Shelf(new Part("двигатель", 12000, false), 5),
            new Shelf(new Part("руль", 1000000, false), 20),
            new Shelf(new Part("передние тормозные колодки", 520, false), 150),
            new Shelf(new Part("ремень грм", 1500, false), 15),
            new Shelf(new Part("генератор", 7500, false), 6),
            new Shelf(new Part("подшипник", 150, false), 215),
            new Shelf(new Part("масляный фильтр", 250, false), 89)
         };

         _jobPrice = new Dictionary<string, int>
         {
            ["коробка передач"] = 7550,
            ["двигатель"] = 9850,
            ["руль"] = 500000,
            ["передние тормозные колодки"] = 1500,
            ["ремень грм"] = 2500,
            ["генератор"] = 4200,
            ["подшипник"] = 800,
            ["масляный фильтр"] = 950
         };

         _clients = FormQueue();
      }

      public void Work()
      {
         const string Repair = "1";
         const string Complete = "2";
         const string Refuse = "3";

         while (_clients.Count > 0)
         {
            bool isWork = true;

            Console.WriteLine(_clients.Count);
            var client = _clients.Dequeue();

            while (isWork)
            {
               ShowMoney();
               Console.Write("\nВыберите действие: \n1 - произвести ремонт \n2 - завершить работу с данной машиной \n3 - отказать клиенту \n№ - ");

               switch (Console.ReadLine())
               {
                  case Repair:
                     MakeRepair(client);
                     break;

                  case Complete:
                     isWork = IsRepaired(client);
                     break;

                  case Refuse:
                     isWork = IsPenalty(client);
                     break;

                  default:
                     Console.WriteLine("\nНет такой команды");
                     break;
               }
               Console.WriteLine("Для продолжения нажмите кнопку");
               Console.ReadKey();
               Console.Clear();
            }
         }
      }

      private Queue<Unit> FormQueue()
      {
         int money = 50000;
         int count = 10;

         var clients = new Queue<Unit>();

         for (int i = 0; i < count; i++)
         {
            clients.Enqueue(new Unit(money, new Car()));
         }

         return clients;
      }

      private bool IsPenalty(Unit client)
      {
         client.TakeMoney(Pay(_penalty));
         Console.WriteLine("\nВы отказали клиенту и потеряли деньги");
         return false;
      }

      private void MakeRepair(Unit unit)
      {
         unit.Car.ShowCarParts();

         Console.Write("\nВыберите что заменить: ");
         int.TryParse(Console.ReadLine(), out int number);

         var brokenPart = unit.Car.RemovePart(number);

         ShowParts();

         Console.Write("\nВыберите запчасть со склада: ");
         int.TryParse(Console.ReadLine(), out int numberShell);
         
         var part = RemovePart(numberShell);

         if (brokenPart == null || part == null)
         {
            Console.WriteLine("\nВы накосячили и потеряли деньги");
            unit.TakeMoney(Pay(_penalty));
            return;
         }

         if (TryReplacePart(brokenPart, part, unit.Car))
         {
            int money = _jobPrice[part.Name] + part.Price;
            TakeMoney(unit.Pay(money));
         }
         else
         {
            if (_storage.Exists(parts => parts.Part == part))
            {
               _storage[--numberShell].AddPart();
               unit.TakeMoney(Pay(part.Price + _jobPrice[part.Name]));
            }
            else
            {
               _storage.Add(new Shelf(part, 1));
            }

            Console.WriteLine("\nВы накосячили и потеряли деньги");
         }
      }

      private bool IsRepaired(Unit client)
      {
         if (client.Car.IsBroken())
         {
            Console.WriteLine("Ремонт не закончен");
            return true;
         }
         else
         {
            Console.WriteLine("Все в норме, клиент уехал.");
            return false;
         }
      }

      private bool TryReplacePart(Part brokenPart, Part part, Car car)
      {
         if (brokenPart.IsBroken == true & brokenPart.Name == part.Name)
         {
            car.AddPart(part);
            return true;
         }
         else
         {
            car.AddPart(brokenPart);
            return false;
         }
      }

      private Part RemovePart(int index)
      {
         if (index >= 0 & index < _storage.Count)
         {
            var part = _storage[--index].TakePart();

            if (_storage[index].Count == 0)
            {
               _storage.RemoveAt(index);
            }

            return part;
         }

         return null;
      }

      private int Pay(int money)
      {
         Money -= money;
         return money;
      }

      private void TakeMoney(int money)
      {
         Money += money;
      }

      private void ShowParts()
      {
         Console.WriteLine("\nЗапчасти на складе:");

         for (int i = 0; i < _storage.Count; i++)
         {
            Console.WriteLine($"№ {i + 1} - {_storage[i]}");
         }
      }

      private void ShowMoney()
      {
         Console.WriteLine($"Деньги автосервиса: {Money}");
      }
   }
   
 public class Shelf
   {
      public Part Part { get; private set; }
      public int Count { get; private set; }

      public Shelf(Part part, int count)
      {
         Part = part;
         Count = count;
      }

      public void AddPart()
      {
         Count++;
      }

      public Part TakePart()
      {
         Count--;
         return Part;
      }

      public override string ToString()
      {
         return $"{Part} | количество - {Count}";
      }
   }
   
  public class Car
   {
      private List<Part> _parts;

      public int Number { get; private set; }

      public Car()
      {
         _parts = new List<Part>{
              new Part("двигатель", 12000, true),
              new Part("коробка передач", 10000, false),
              new Part("ремень грм", 1500, true)
         };
      }

      public void AddPart(Part part)
      {
         _parts.Add(part);
      }

      public Part RemovePart(int index)
      {
         if (--index >= 0 & index < _parts.Count)
         {
            var part = _parts[index];
            _parts.Remove(_parts[index]);
            return part;
         }

         return null;
      }

      public void ShowCarParts()
      {
         Console.WriteLine("\nЭлементы машины:");

         for (int i = 0; i < _parts.Count; i++)
         {
            Console.WriteLine($"№ {i+1} | {_parts[i].Name} | цена - {_parts[i].Price} | статус: {(_parts[i].IsBroken ? "сломана" : "в норме")}");
         }
      }

      public bool IsBroken()
      {
         return _parts.Exists(part => part.IsBroken == true);
      }
   }
   
   public class Unit
   {
      public int Money { get; private set; }
      public Car Car { get; private set; }

      public Unit(int money, Car car)
      {
         Money = money;
         Car = car;
      }

      public void TakeMoney(int money)
      {
         Money += money;
      }

      public int Pay(int money)
      {
         Money -= money;
         return money;
      }
   }
   
  public class Part
   {
      public string Name { get; private set; }
      public int Price { get; private set; }
      public bool IsBroken { get; private set; }

      public Part(string name, int price, bool isBroken)
      {
         Name = name;
         Price = price;
         IsBroken = isBroken;
      }

      public override string ToString()
      {
         return $"{Name} | цена - {Price} | статус: {(IsBroken ? "сломана" : "в норме")}";
      }
   } 

internal class Program
   {
      static void Main(string[] args)
      {
         bool isWork = true;

         var playerItems = new List<Item>
         {
            new Item("Хлеб", 25, 4),
         new Item("Бутылка воды 0,5 л.", 21, 3),
         new Item("Меч (медный)", 550, 1),
         new Item("Щит (кожанный)", 350, 1),
         new Item("Яблоко", 15, 5),
         };

         var dealerItems = new List<Item>
         {
            new Item("Хлеб", 25, 15),
         new Item("Бутылка воды 0,5 л.", 21, 15),
         new Item("Меч (медный)", 550, 2),
         new Item("Щит (кожанный)", 350, 1),
         new Item("Рыба", 25, 25),
         new Item("Кольцо Саурона", 15000, 1),
         new Item("Яблоко", 15, 40),
         new Item("Бутылка вина 0,7 л.", 250, 65),
         new Item("Броня (серебряная)", 2250, 2)
         };

         Unit player = new Player("Игрок", playerItems, 2500);
         Unit trader = new Trader("Торговец", dealerItems, 3000);

         Shop shop = new Shop();

         while (isWork)
         {
            Console.WriteLine("Игрок (монет: " + player.Money + "):");
            player.ShowItem();

            Console.WriteLine("\nТорговец (монет: " + trader.Money + "):");
            trader.ShowItem();

            switch (ReadInput("\nВведите номер команды:\n 1 - купить товар\n 2 - продать товар\n 3 - выход\n № - "))
            {
               case "1":
                  Trade(shop, player, trader);
                  break;

               case "2":
                  Trade(shop, trader, player);
                  break;

               case "3":
                  isWork = false;
                  break;

               default:
                  Console.WriteLine("Неверная команда !!!");
                  Console.ReadKey();
                  break;
            }
            Console.Clear();
         }
      }

      static string ReadInput(string message)
      {
         Console.Write(message);
         return Console.ReadLine();
      }

      static void SelectItem(out int number, out int amount)
      {
         number = Convert.ToInt32(ReadInput("Выберите товар: "));
         amount = Convert.ToInt32(ReadInput("Укажите количество товара: "));
      }

      static void Trade(Shop shop, Unit buyer, Unit seller)
      {
         SelectItem(out int number, out int amount);
         shop.SpendDeal(buyer, seller, number, amount);
      }
   }
   
  public class Shop
   {
      private Item _product;

      public void SpendDeal(Unit buyer, Unit seller, int number, int amount)
      {
         _product = seller.GetItemByIndex(number);

         if (_product != null)
         {
            var canSell = seller.CheckAmount(_product, amount);
            var canBuy = CheckMoneyToPay(buyer, _product, amount);

            if (canBuy && canSell)
            {
               seller.RemoveItem(_product, amount);
               buyer.AddItem(_product, amount);
               seller.GetMoney(buyer.GiveMoney(_product.Price * amount));
            }
            else
            {
               if (canSell == false)
               {
                  Console.WriteLine("Продавец не может продать столько товара");
               }
               if (canBuy == false)
               {
                  Console.WriteLine("Недостаточно средств");
               }
               Console.ReadKey();
            }
         }
         else
         {
            Console.WriteLine("Товара нет в списке");
            Console.ReadKey();
         }
      }

      public bool CheckMoneyToPay(Unit buyer, Item product, int amount) => buyer.Money >= product.Price * amount;
   }
   
  public class Player : Unit
   {
      public Player(string name, List<Item> inventory, int money) : base(name, inventory, money)
      {
         Name = name;
         Money = money;
         _inventory = inventory;
      }
   }
   
   public class Trader : Unit
   {
      public Trader(string name, List<Item> inventory, int money) : base(name, inventory, money)
      {
         Name = name;
         Money = money;
         _inventory = inventory;
      }
   }
   
   public abstract class Unit
   {
      protected List<Item> _inventory = new List<Item>();

      public string Name { get; protected set; }
      public int Money { get; protected set; }

      public Unit(string name, List<Item> inventory, int money)
      {
         Name = name;
         Money = money;
         _inventory = inventory;
      }

      public virtual void AddItem(Item item, int amount)
      {
         int index = GetIndex(item);

         if (index < 0)
         {
            item.ChangeCount(amount);
            _inventory.Add(item);
         }
         else
         {
            _inventory[index].ChangeCount(_inventory[index].Count + amount);
         }
      }

      public virtual void RemoveItem(Item item, int amount)
      {
         int index = GetIndex(item);

         _inventory[index].ChangeCount(_inventory[index].Count - amount);

         if (_inventory[index].Count == 0)
         {
            _inventory.Remove(item);
         }
      }

      public virtual int GiveMoney(int moneyToPay)
      {
         Money -= moneyToPay;
         return moneyToPay;
      }

      public virtual void GetMoney(int money)
      {
         Money += money;
      }

      public virtual Item GetItemByIndex(int number)
      {
         if (_inventory.Count >= number && number > 0)
         {
            return _inventory[--number];
         }
         else
         {
            return null;
         }
      }

      public int GetIndex(Item item)
      {
         int index;
         return index = _inventory.FindIndex(x => x.Name == item.Name);
      }

      public virtual bool CheckAmount(Item item, int count)
      {
         int index = GetIndex(item);

         if (_inventory[index].Count >= count)
         {
            return true;
         }
         return false;
      }

      public virtual void ShowItem()
      {
         int number = 0;
         _inventory.ForEach(item => Console.WriteLine($"№ {++number} | {item}"));
      }
   }
   
   public class Item
   {
      public string Name { get; private set; }
      public int Price { get; private set; }
      public int Count { get; private set; }

      public Item(string name, int price, int count)
      {
         Name = name;
         Price = price;
         Count = count;
      }

      public void ChangeCount(int value)
      {
         Count = value;
      }

      public override string ToString() => Name + " цена: " + Price + " $ " + "количество - " + Count;
   }
 }

class Program
   {
      static void Main(string[] args)
      {
         int countBuyers = 5;
         int minMoney = 200;
         int maxMoney = 700;

         Shop shop = new Shop();
         shop.FormQueue(countBuyers, minMoney, maxMoney);
         shop.ServiceBuyers();
      }
   }

   class Shop
   {
      private CashDesk _cashDesk = new CashDesk();
      private Queue<Client> _buyers = new Queue<Client>();
      private List<Product> _products = new List<Product>();
      private Random _random = new Random();

      public Shop()
      {
         new Product("Хлеб", 40);
         new Product("Бумага", 100);
         new Product("Шампунь", 180);
         new Product("Вантуз", 150);
         new Product("Стерка", 10);
         new Product("Мыло", 20);
         new Product("Пельмени", 250);
         new Product("Рыба", 250);
         new Product("Масло", 70);
         new Product("Карандаш", 30);
         new Product("Содовая", 70);
   }

      public void FormQueue(int clientsCount, int minMoney, int maxMoney)
      {
         for (int i = 0; i < clientsCount; i++)
         {
            var buyer = new Client(_random.Next(minMoney, maxMoney));

            buyer.СhooseProducts(_products, _random);

            _buyers.Enqueue(buyer);
         }
      }

      public void ServiceBuyers()
      {
         while (_buyers.Count > 0)
         {
            _cashDesk.Sell(_buyers.Dequeue());
         }
      }
   }

   class CashDesk
   {
      private List<Product> _basked = new List<Product>();

      public int Money { get; private set; } = 0;

      public void Sell(Client client)
      {
         bool isPay = false;

         while (!isPay)
         {
            if (client.ChekSolvency())
            {
               Money += client.ToPay();
               isPay = true;
            }
            else
            {
               TakeProduct(client);
            }
         }
      }

      private void TakeProduct(Client client)
      {
         _basked.Add(client.ThrowProduct(new Random()));
      }
   }

   class Client
   {
      private int _costToPay = 0;
      private List<Product> _basked = new List<Product>();
      private List<Product> _bag = new List<Product>();

      public int Money { get; private set; }

      public Client(int money)
      {
         Money = money;
      }

      public void СhooseProducts(List<Product> products, Random random)
      {
         int length = random.Next(products.Count);

         for (int i = 0; i < length; i++)
         {
            var product = products[random.Next(products.Count)];
            _costToPay += product.Price;
            _basked.Add(product);
         }
      }

      public Product ThrowProduct(Random random)
      {
         var product = _basked[random.Next(_basked.Count)];
         _basked.Remove(product);
         _costToPay -= product.Price;

         return product;
      }

      public bool ChekSolvency()
      {
         return Money >= _costToPay;
      }

      public int ToPay()
      {
         TakeProducts();

         Money -= _costToPay;
         return _costToPay;
      }

      private void TakeProducts()
      {
         _bag.AddRange(_basked);
         _basked.Clear();
      }
   }

   class Product
   {
      public string Name { get; private set; }
      public int Price { get; private set; }

      public Product(string name, int price)
      {
         Name = name;
         Price = price;
      }

      public override string ToString() => Name + "-" + Price;
   }
}

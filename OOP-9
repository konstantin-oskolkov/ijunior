class Program
   {
      static void Main(string[] args)
      {
         int countBuyer = 5;
         int minMoney = 200;
         int maxMoney = 700;

         Shop shop = new Shop();
         shop.FormAQueue(countBuyer, minMoney, maxMoney);
         shop.ServiceBuyer();
      }
   }

   class Shop
   {
      private CashDesk _cassa = new CashDesk();
      private Queue<Client> _buyer = new Queue<Client>();
      private List<Product> _products = new List<Product>() {
            new Product("Хлеб", 40),
            new Product("Бумага", 100),
            new Product("Шампунь", 180),
            new Product("Вантуз", 150),
            new Product("Стерка", 10),
            new Product("Мыло", 20),
            new Product("Пельмени", 250),
            new Product("Рыба", 250),
            new Product("Масло", 70),
            new Product("Карандаш", 30),
            new Product("Содовая", 70)};

      private Random _value = new Random();

      public void FormAQueue(int clientsCount, int minMoneyValue, int maxMoneyValue)
      {
         for (int i = 0; i < clientsCount; i++)
         {
            var buyer = new Client(_value.Next(minMoneyValue, maxMoneyValue));

            buyer.СhooseProducts(_products, _value);

            _buyer.Enqueue(buyer);
         }
      }

      public void ServiceBuyer()
      {
         int queueLength = _buyer.Count;

         for (int i = 0; i < queueLength; i++)
         {
            _cassa.Sell(_buyer.Dequeue());
         }
      }
   }

   class CashDesk
   {
      public int Money { get; private set; } = 0;

      private List<Product> _basked = new List<Product>();

      public void Sell(Client client)
      {
         bool isWork = true;

         while (isWork)
         {
            if (client.ChekSolvency())
            {
               Money += client.ToPay();
               isWork = false;
            }
            else
            {
               TakeProduct(client);
            }
         }
      }

      private void TakeProduct(Client client)
      {
         _basked.Add(client.ThrowProduct(new Random()));
      }
   }

   class Client
   {
      public int Money { get; private set; }

      private List<Product> _basked = new List<Product>();
      private List<Product> _bag = new List<Product>();
      private int _costToPay = 0;

      public Client(int money)
      {
         Money = money;
      }

      public void СhooseProducts(List<Product> products, Random value)
      {
         int length = value.Next(products.Count);

         for (int i = 0; i < length; i++)
         {
            var product = products[value.Next(products.Count)];
            _costToPay += product.Price;
            _basked.Add(product);
         }
      }

      private void TakeProducts()
      {
         _bag.AddRange(_basked);
         _basked.Clear();
      }

      public Product ThrowProduct(Random value)
      {
         var product = _basked[value.Next(_basked.Count)];
         _basked.Remove(product);
         _costToPay -= product.Price;

         return product;
      }

      public bool ChekSolvency()
      {
         if (Money >= _costToPay)
         {
            return true;
         }
         else
         {
            return false;
         }
      }

      public int ToPay()
      {
         TakeProducts();

         Money -= _costToPay;
         return _costToPay;
      }
   }

   class Product
   {
      public string Name { get; private set; }
      public int Price { get; private set; }

      public Product(string name, int price)
      {
         Name = name;
         Price = price;
      }

      public override string ToString() => Name + "-" + Price;
   }
}

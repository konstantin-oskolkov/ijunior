class Program
   {
      static void Main(string[] args)
      {
         int minHelth = 50;
         int maxHelth = 150;
         int minDamage = 10;
         int maxDamage = 60;
         int countSolders = 20;

         Battle war = new Battle();
         Platoon platoon1 = new Platoon("взвод страны один");
         Platoon platoon2 = new Platoon("взвод страны два");

         platoon1.CreateSolders(countSolders, minHelth, maxHelth, minDamage, maxDamage);

         platoon2.CreateSolders(countSolders, minHelth, maxHelth, minDamage, maxDamage);

         war.Fight(platoon1, platoon2);
      }
   }

   public class Battle
   {
      public void Fight(Platoon platoon1, Platoon platoon2)
      {
         while (platoon1.IsAlive && platoon2.IsAlive)
         {
            platoon1.TakeAttack(platoon2.Attack());
            platoon2.TakeAttack(platoon1.Attack());
         }

         if (platoon1.IsAlive)
         {
            Console.WriteLine($"Победитель сражения: {platoon1.Name}");
         }
         else if (platoon2.IsAlive)
         {
            Console.WriteLine($"Победитель сражения: {platoon1.Name}");
         }
         else
         {
            Console.WriteLine("В битве ничья");
         }
      }
   }

   public class Platoon
   {
      private List<Solder> _soldiers;
      private Random _randomValue = new Random();

      public bool IsAlive => _soldiers.Count > 0;
      public string Name { get; private set; }

      public Platoon(string name)
      {
         Name = name;
         _soldiers = new List<Solder>();
      }

      public void CreateSolders(int count, int minHelth, int maxHelth, int minDamage, int maxDamage)
      {
         for (int i = 0; i < count; i++)
            _soldiers.Add(new Solder(_randomValue.Next(minHelth, maxHelth), _randomValue.Next(minDamage, maxDamage)));
      }

      public int Attack()
      {
         if (IsAlive == false)
         {
            return default;
         }
         return _soldiers[_randomValue.Next(_soldiers.Count)].Attack();
      }

      public void TakeAttack(int damage)
      {
         _soldiers[_randomValue.Next(_soldiers.Count)].TakeDamage(damage);

         RemoveDeadSolders();
      }

      private void RemoveDeadSolders()
      {
         for (int i = 0; _soldiers.Count > i; i++)
         {
            if (_soldiers[i].IsAlive == false)
            {
               _soldiers.Remove(_soldiers[i--]);
            }
         }
      }
   }

   public class Solder : Unit
   {
      public Solder(int health, int damage)
      { 
         Health = health;
         Damage = damage;
      }

      public override void TakeDamage(int damage)
      {
         if (damage <= Health)
            Health -= damage;
         else
            Health = 0;
      }

      public override int Attack()
      {
         return Damage;
      }
   }

   public abstract class Unit
   {
      public bool IsAlive => Health > 0;
      public int Health { get; protected set; }
      public int Damage { get; protected set; }

      public abstract int Attack();

      public abstract void TakeDamage(int damage);
   }
}
